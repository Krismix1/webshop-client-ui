/* You can add global styles to this file, and also import other style files */
@import "~@angular/material/prebuilt-themes/indigo-pink.css";
@import url('https://fonts.googleapis.com/css?family=Raleway:300,700');
@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,600,700');
$fa-font-path: '../node_modules/font-awesome/fonts';
$cardBackground: #fbf6de;
@import '~font-awesome/scss/font-awesome';
body {
  margin: 0;
  padding: 0;
  font-family: 'Arial';
  height: 80vh;
  box-sizing: border-box;
  // background: #d7d1db;
  background: #f4f3ef;
}

.container {
  margin: 0.5em 1.5em 1.5em;
  padding: 0.7em;
  height: 100%;
}

.nav-bar {
  // min-height: 3em;
  // padding-top: 1em;
  box-sizing: border-box;
}

.bg-light {
  background: #cccccc;
}

.container-spacer {
  flex: 1 1 auto;
}

.nav-item {
  margin: 0 1em;
  color: black;
}

.search {
  display: inline-block;
}

.search-icon {
  display: inline-block;
}

.btn {
  border: none;
  cursor: pointer;
  background: #ccc;
  padding: 4px 6px;
}

.btn:hover {
  background: #bbb;
}

.card {
  background: $cardBackground;
  padding: 1rem;
  border-radius: 10px;
  box-shadow: 0 2px 2px rgba(204, 197, 185, 0.5);
}

.form-group {
  width: 100%;
}

.form-control {
  width: 100%;
  margin-top: 5px;
  margin-bottom: 5px;
}

:-webkit-autofill {
    -webkit-box-shadow: 0 0 0 30px $cardBackground inset;
}

.status-feedback {
  margin-top: 10px;
}
// Animating link underlining
// From http://tobiasahlin.com/blog/css-trick-animating-link-underlines/
/*
Creating this effect is surprisingly easy, doesn’t require any additional DOM elements to be added through HTML,
and falls back nicely for browsers that don’t support CSS animations (it will just show up as a regular underline).

The first thing we need to do is turn off text-decoration, and set the link’s position to relative.
For simplicitiy’s sake, we’ll also make sure the link doesn’t change color on hover.
Here we’re applying the effect to all link elements inside h2s:

*/
.nav-bar .nav-link {
  position: relative;
  text-decoration: none;
}
/*
Next, we want to add the border, and hide it through a transformation.
We do this by inserting it with :before, and setting its X scale to 0.
As a fallback, we hide it with visibility: hidden for browsers that don’t support CSS animations.
*/

.nav-bar .nav-link::before {
  content: "";
  position: absolute;
  width: 100%;
  height: 2px;
  bottom: 0;
  left: 0;
  background-color: #000;
  visibility: hidden;
  -webkit-transform: scaleX(0);
  transform: scaleX(0);
  -webkit-transition: all 0.3s ease-in-out 0s;
  transition: all 0.3s ease-in-out 0s;
}
/*
At the very bottom we tell the element to animate all changes applied to it,
with a duration of 0.3 seconds. For the animation to appear, now we just need to make
the element visible again on hover, and set its X scale back to 1:
*/

.nav-bar .nav-link:hover::before {
  visibility: visible;
  -webkit-transform: scaleX(1);
  transform: scaleX(1);
}

.cart-sign {
  display: flex;
  justify-content: center;
  align-items: center;
}

.cart-sign:hover {
  cursor: pointer;
  color: #48cfad;
}

.required {
  color: red;
}
